#include "iostream"

using namespace std;

template<class T>
struct Node
{
	T value;
	Node<T>* next;
	Node(T value_) { value = value_; next = 0; }
};


template<class T>
class LinkedList
{
public:
	LinkedList();
	~LinkedList();
	bool Find(T x, Node<T>**& p);//el nodo solo tiene un template
	bool Insert(T x);
	bool Remove(T x);
	void Print();
private:
	Node<T>* head;
};

template<class T>
LinkedList<T>::LinkedList()
{
	head = 0;
}

template<class T>
LinkedList<T>::~LinkedList()
{
	Node<T>* a = head, * b;
	while (a)
	{
		b = a->next;
		delete a;
		a = b;
	}
}


template<class T>
bool LinkedList<T>::Find(T x, Node<T>**& p)
{
	for (p = &head;
		*p && (*p)->value != x; 
		p = &((*p)->next));
	return *p && (*p)->value == x;
}

template<class T>
bool LinkedList<T>::Insert(T x)
{
	Node<T>** p;
	if (Find(x, p)) return 0;
	Node<T>* new_Node = new Node<T>(x);
	new_Node->next = *p;
	*p = new_Node;
	return 1;
}


template<class T>
void LinkedList<T>::Print()
{
	Node<T>* aux = head;
	for (; aux->next; aux = aux->next) {
		cout << aux->value << " -> ";
	}
	cout << aux->value << endl;
}

template<class T>
bool LinkedList<T>::Remove(T x)
{
	Node<T>** p;
	if (!Find(x, p)) return 0;
	Node<T>* temp = *p;
	*p = (*p)->next;
	delete temp;
	return 1;
}



int main()
{
	LinkedList<int> L1;
	L1.Insert(11);
	L1.Insert(344);
	L1.Insert(344);
	L1.Insert(2);
	L1.Insert(678);
	L1.Print();
	L1.Remove(2);
	L1.Print();
	L1.Remove(678);
	L1.Print();
	L1.Remove(11);
	L1.Print();

	LinkedList<float> L2;
	L2.Insert(3.14233);
	L2.Insert(67.123);
	L2.Insert(1.234);
	L2.Insert(8.657);
	L2.Insert(4.12);
	L2.Print();
	L2.Remove(3.14233);
	L2.Print();
	L2.Remove(4.12);
	L2.Print();
}
#include <iostream>
using namespace std;

class Comparador
{
public:
    virtual bool op(int a, int b) {
        return a == b;
    }
    int a = 0, b = 0;

private:
};

class Menor : public Comparador
{
public:
    bool op(int a, int b) {
        return a > b;
    }
};

class Mayor : public Comparador
{
public:
    bool op(int a, int b) {
        return a < b;
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////

struct CBinNode
{
    CBinNode(int _v)
    {
        value = _v; nodes[0] = nodes[1] = 0;
    }
    int value;
    CBinNode* nodes[2];
};

////////////////////////////////////////////////////////////////////////////////////////////////////////

class CBinTree
{
public:
    CBinTree();
    CBinTree(Comparador* ptr);
    ~CBinTree();
    bool Find(int x, CBinNode**& p);
    bool Insert(int x);
    bool Remove(int x);
    CBinNode** Rep(CBinNode** p);
    void InOrder(CBinNode* n);
    void Print();

    
private:
    Comparador* cmp = 0;
    CBinNode* m_root;
};

CBinTree::CBinTree()
{
    m_root = 0;
}

CBinTree::CBinTree(Comparador *ptr)
{
    cmp = ptr;
    m_root = 0;
}

CBinTree::~CBinTree()
{
    // ?
}

bool CBinTree::Find(int x, CBinNode**& p)
{   
    for (p = &m_root;
        *p && (*p)->value != x;
        //p = &((*p)->nodes[(*p)->value < x]));//aca esta el cambio
        p = &((*p)->nodes[cmp->op((*p)->value, x)]));
    return *p && (*p)->value == x;
}

bool CBinTree::Insert(int x)
{
    CBinNode** p;
    if (Find(x, p)) return 0;
    *p = new CBinNode(x);
    return 0;
}
bool CBinTree::Remove(int x)
{
    CBinNode** p;
    if (!Find(x, p)) return 0;
    if ((*p)->nodes[0] && (*p)->nodes[1])
    {
        CBinNode** q = Rep(p);
        (*p)->value = (*q)->value;
        p = q;
    }
    CBinNode* t = *p;
    *p = (*p)->nodes[!(*p)->nodes[0]];
    delete t;
    return 0;
}

CBinNode** CBinTree::Rep(CBinNode** p)
{
    bool b = rand() % 2;
    for (p = &((*p)->nodes[b]); (*p)->nodes[!b]; p = &((*p)->nodes[!b]));
    return p;
}

void CBinTree::InOrder(CBinNode* n)
{
    if (!n) return;
    InOrder(n->nodes[0]);
    cout << n->value << " ";
    InOrder(n->nodes[1]);
}

void CBinTree::Print()
{
    InOrder(m_root);
    cout << endl;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

int main()
{

    Comparador* pol;
    Comparador* pol2;
    Menor l;
    Mayor g;
    pol = &g;
    pol2 = &l;

    //CBinTree t(&g);
    CBinTree t(pol);
    cout << "arbol en ascendente " << endl;

    t.Insert(50); t.Insert(30); t.Insert(60);
    t.Insert(80); t.Insert(55); t.Insert(11);
    t.Insert(33); t.Insert(5); t.Insert(14);
    t.Insert(31); t.Insert(48);
    t.Print();

    t.Remove(31); t.Print(); //case 0
    t.Remove(14); t.Print(); //case 0

    t.Remove(11); t.Print(); //case 1, left
    t.Remove(33); t.Print(); //case 1, right

    t.Remove(50); t.Print(); //case 2

    t.Remove(60); t.Print();
    t.Remove(48); t.Print();
    t.Remove(55); t.Print();
    t.Remove(5);  t.Print();
    t.Remove(80); t.Print();

    t.Remove(30); t.Print();

    cout << endl;
    cout << "arbol en descendente " << endl;
    CBinTree t2(pol2);
    t2.Insert(50); t2.Insert(30); t2.Insert(60);
    t2.Insert(80); t2.Insert(55); t2.Insert(11);
    t2.Insert(33); t2.Insert(5); t2.Insert(14);
    t2.Insert(31); t2.Insert(48);
    t2.Print();

    t2.Remove(31); t2.Print(); //case 0
    t2.Remove(14); t2.Print(); //case 0

    t2.Remove(11); t2.Print(); //case 1, left
    t2.Remove(33); t2.Print(); //case 1, right

    t2.Remove(50); t2.Print(); //case 2

    t2.Remove(60); t2.Print();
    t2.Remove(48); t2.Print();
    t2.Remove(55); t2.Print();
    t2.Remove(5);  t2.Print();
    t2.Remove(80); t2.Print();

    t2.Remove(30); t2.Print();
}